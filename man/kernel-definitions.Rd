% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/define_kernel.R
\name{define_kernel}
\alias{define_kernel}
\alias{define_k}
\alias{remove_k}
\title{Functions to initialize and define IPM kernels}
\usage{
define_kernel(
  proto_ipm,
  name,
  formula,
  family,
  ...,
  data_list = list(),
  states,
  has_hier_effs = FALSE,
  levels_hier_effs = list(),
  evict_cor = FALSE,
  evict_fun = NULL
)

define_k(
  proto_ipm,
  name,
  family,
  ...,
  data_list = list(),
  states,
  has_hier_effs = FALSE,
  levels_hier_effs = list(),
  evict_cor = FALSE,
  evict_fun = NULL
)

remove_k(proto_ipm)
}
\arguments{
\item{proto_ipm}{The name of object you wish to append the new kernel to.}

\item{name}{The name of the new kernel. There are only two rules: 1. For
\code{define_k}, the name must start with \code{"K"} or \code{"k"}.
2. For \code{define_kernel}, the name must start with any letter but \code{"K"} or
\code{"k"}.}

\item{formula}{A bare expression specifying the form of the kernel. See below
for examples}

\item{family}{The type of kernel. Options are \code{"CC"} for continuous to continuous
transitions, \code{"DC"} for discrete to continuous (e.g. emergence from a seedbank),
\code{"CD"} for continuous to discrete (e.g. entering a seedbank), and \code{"DD"} for
discrete to discrete (e.g. stasis in a seedbank).}

\item{...}{For \code{define_kernel}, set of named expressions that correspond
to vital rates in \code{formula}. For \code{define_K}, a set of named expressions
that relate the population state at T + 1 to the population state at T. Alternatively,
can be an expression where the left hand side is the name of the kernel specified
in \code{name} and the right hand side only describes the structure of the
iteration kernel. In all cases, suffix expansion of hierarchical models is supported.
Specific details for each case are in their respecitive function's sections
below.}

\item{data_list}{A list of named values that correspond to constants in the formula.
You do not need to specify vectors corresponding to the domains here.}

\item{states}{A character vector containing the names of each state variable used in
the kernel.}

\item{has_hier_effs}{A logical indicating whether or not the kernel and/or its
underlying vital rates are structured with hierarchical effects. If so and you
specify either the functional forms or the exact parameter values you want to use,
the kernels will be automatically split according to the notation in the vital
rates and kernel formulae and multiple kernels will be built. See the vignette
on the syntax for this feature for more details (\code{vignettes(
'hierarchical-notation', package = 'ipmr')}).}

\item{levels_hier_effs}{A named list with vectors corresponding the various levels
the hierarchical variable can take. Entries in this list should be a single
vector and should be character or integer typed.}

\item{evict_cor}{A logical indicating whether an eviction correction should be applied
to the kernel. It is generally recommended to use a function in the vital rate
definition as opposed to using this option Default is \code{FALSE}.}

\item{evict_fun}{If \code{evict_cor== TRUE}, then a function that corrects for it.
Currently, the only implemented function is \code{truncated_distributions}.
This works by modifying the functional form of the vital rate expressions
\code{...}, and so supplying your own function in this slot will be difficult.
One can also specify \code{usr_funs} function that performs the correction
during the numerical implementation of the model itself. In that case,
set \code{evict_cor} to \code{FALSE}.
}

\details{Different classes of IPMs may have many or only a few kernels. Each
one requires its own call to this function, though there are some exceptions,
namely for kernels derived from hierarchical models (e.g. vital rate models
fit across plots and years). \code{remove_k} is a helper for re-building models
but with a different \code{K} kernel.
}

\section{\code{define_k}{

The preferred method of defining a \code{K} kernel is to use the left
hand side of the \code{...} to reference the population vectors that the right
hand side creates (e.g. \code{n_T_1 = (P + F) \%*\% n_T}). This enables powerful
iteration-based methods to work properly. On the other hand, these iteration
based methods can be quite time consuming, and many applications only require
an iteration matrix while not necessarily requiring the population vectors (e.g.
calculations of deterministic population growth rate). In those cases, the
\code{...} can contain something like \code{K = P + F}. In this case, the left
hand side of the expression should match the \code{name} argument to \code{define_k}.
}

\section {\code{define_kernel}}{

\code{define_kernel} generates most of the information needed to create an IPM
kernel. There are a few requirements - \code{name}, \code{family}, and
\code{formula} must not be empty. The \code{formula} should be an expression
for how vital rates produce a kernel (e.g. \code{formula = S * G}). The
\code{...} should be a set of named expressions that correspond to vital rate
expressions (e.g. \code{G = dnorm(size_2, mean_size, sd_size)}). See the vignettes
for more information on how to get started.
}}
}
\value{
All functions described here return a  \code{proto_ipm}.
}
\description{
Adds a new kernel to the \code{proto_ipm} structure.
}
